class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false; // If lengths are different, they can't be anagrams
        }

        Map<Character, Integer> map = new HashMap<>();

        // Count the frequency of each character in string s
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        // Decrease the frequency of each character found in string t
        for (char c : t.toCharArray()) {
            if (!map.containsKey(c) || map.get(c) == 0) {
                return false; // If a character in t is not in s or has different frequency
            }
            map.put(c, map.get(c) - 1);
        }

        return true; // If all frequencies match
    }
}
-------------------------------------------------------------------------------------------------------------------------

Valid Anagram 2nd approach
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        
        int[] freq = new int[26];
        for (int i = 0; i < s.length(); i++) {
            freq[s.charAt(i) - 'a']++;
            freq[t.charAt(i) - 'a']--;
        }
        
        for (int i = 0; i < freq.length; i++) {
            if (freq[i] != 0) {
                return false;
            }
        }
        
        return true;
    }
}

